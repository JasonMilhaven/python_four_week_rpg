RPG_Initial_Design.txt----------------------------------------------------------------------------------------

Open world rpg game, after base classes are created, make grass tile/1 monster/player



class diagram

Program (not a class, global scope)
UI
 Frame
 Text
Thread
Entity
 Player
 Monster
  various monsters..
Tile (game terrain)
 BlockingTile
  Mountain
  SnowyMountain
 WalkableTile
  Grass
  Snow

if extra time:

Buff


class hierarchy and containers----------------------------------------------------------------------------------------

Program
 Player reference
 Entity list
 Tile list
 Menu
  LoginButton


naming conventions----------------------------------------------------------------------------------------

constants: A_CONSTANT
variables: aVariable
class: ClassName
func/method: a_func_or_method()

fields and methods (member vars and funcs) are public by default
and are to be surrounded by underscores, 1 if protected 2 if private
_protected_method_()
__privateVariable__()


roles----------------------------------------------------------------------------------------

Benamin - Art, Monster subclass(es) behaviour
Doug - Entity, Player, Misc
Igor - Art, login page
Jason - main Program, UI classes, Tiles, Entity


class design----------------------------------------------------------------------------------------

anything with a question mark will not be priortized

Program

all members are assumed to be private

 constructor()
  WIN_TITLE = "test"
  WIN_WID = 1000
  WIN_HEIGHT = 500
  ICON = "Icon.png"

  isRunning = true
  inGame = false
  uiComponents = empty list
  entities = empty list
 
  pygameSurface = create pygame win with width and height constants
  set window icon

  load UI here, add to uiComponent list

  create draw thread, start the thread
  start the main event loop

  is_mouse_over(transform)
   if mouse in transform bounds
    return true, otherwise return false

  event_loop()
   while isRunning
    if hovered tile
     call hover event
    else
     call end hover event
   
    for every pygame event
     if event is quit
      isRunning = false
      safely terminate program and threads
     if event is mouse down
      loop through uiComponents
       if mouse_is_over ui
        call on_clicked
   

Transform

floats:
 _posX_
 _posY
 _sizeX_
 _sizeY_

 public accessor for each field

 public get_pos, get_size
 returning tuples

 public set_pos, set_size
 will go through accessors


UIComponent
 __visible__
 public accessors

 on_clicked() -called from main program
 on_hover()

UIComponent
 load an image upon instantiation

Entity derives from Transform
 maxHealth
 health
 damage
 movespeed
 range
 strength?
 dexterity?
 intelligence?
 __entityState__
 
 walk animation
 attack animation
 die animation?

 enum EntityState: -used for animations
  WALKING
  IDLING
  ATTACKING
 coroutine animate()
  switch entityState
 update() -called from program in main loop
 attack()
 die()
 move(x, y)

 constructor(int x = 0, y = 0)
 destructor()
 

Player derives from Entity
 walk animation
 attack animation
 die animation?

 override die()
  respawn player

 walk() and attack() -called from Program class given input
 

Monster derives from Entity
 int array offsets 
 int sight

 override update()
  -move monster given offsets
  attack() player if in sight


TestMonster
 constructor()
  set animation images
  set attributes

Tile derives from Transform
 texture
 x, y position
 isBlocking
 moveSpeed modifier
 spawnableMonster list
 
 on_collide() called when an entity enters tile

