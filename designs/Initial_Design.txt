RPG_Initial_Design.txt----------------------------------------------------------------------------------------


Design Number: 1
Author(s): Jason



Open world rpg game, after base classes are created, make grass tile/1 monster/player



class diagram

utilities (module)
Program
UI
 Frame
 Text
Thread
Entity
 Player
 Monster
  various monsters..
Tile (game terrain)
  Mountain
  SnowyMountain
  Grass
  Snow

if extra time:

Buff/Ability
Weapon


class hierarchy and containers----------------------------------------------------------------------------------------

Program
 Player reference
 Entity list
 Tile list
 Menu
  LoginButton


naming conventions----------------------------------------------------------------------------------------

import order is:
python lib
pygame lib
any project lib

constants: A_CONSTANT
variables: aVariable
class: ClassName
func/method: a_func_or_method()

fields and methods (member vars and funcs) are public by default
and are to be surrounded by underscores, 1 if protected 2 if private
_protected_method_()
__privateVariable__()


roles----------------------------------------------------------------------------------------

Benamin - Art, Monster subclass(es) behaviour
Doug - Entity, Player, Misc
Igor - Art, login page
Jason - main Program, UI classes, Tiles, Entity


class design----------------------------------------------------------------------------------------

anything with a question mark will not be priortized

Program

all members are assumed to be private

 constructor()
  WIN_TITLE = "test"
  WIN_WID = 1000
  WIN_HEIGHT = 500
  ICON = "Icon.png"

  isRunning = true
  uiComponents = empty list
  entities = empty list
 
  pygameSurface = create pygame win with width and height constants
  set window icon

  load UI here, add to uiComponent list

  create draw thread, start the thread
  start the main event loop

  is_mouse_over(transform)
   if mouse in transform bounds
    return true, otherwise return false

  event_loop()
   while isRunning
    if hovered tile
     call hover event
    else
     call end hover event
   
    for every pygame event
     if event is quit
      isRunning = false
      safely terminate program and threads
     if event is mouse down
      loop through uiComponents
       if mouse_is_over ui
        call on_clicked
     if event is keypress
      if keypress is valid move direction
       if player exists
        if player is not dead
         move the player given the direction

     for each entity, call update

  draw_loop() executed on "daemon" seperate thread
   while isRunning
    draw ui in reverse order
    draw entities

  on_game_state_changed(bool inGame)
   if inGame
    recreate main menu UI using Igor's menu subclasses
   else
    start a game using Igor UI functions
   

Transform

floats:
 _posX_
 _posY
 _sizeX_
 _sizeY_

 public accessor for each field

 public get_pos, get_size
 returning tuples

 public set_pos, set_size
 will go through accessors


UIComponent
 __visible__
 public accessors

 on_clicked() -called from main program
 on_hover()

UIComponent
 load an image upon instantiation

Entity derives from Transform
 moveX
 moveY
 maxHealth
 health
 damage
 movespeed
 range
 strength?
 dexterity?
 intelligence?
 __entityState__
 
 walk animation
 attack animation
 die animation?

 set_move(x, y)
  moveX = x
  moveY = y

 get_move
  return moveX, moveY


 enum EntityState: -used for animations
  WALKING
  IDLING
  ATTACKING
 coroutine animate()
  switch entityState
 update() -called from program in main loop
 attack()
 die()
 move(x, y)

 constructor(int x = 0, y = 0)
 destructor()
 

Player derives from Entity
 walkDirection tuple updated from player input
 walk animation
 attack animation
 die animation?

 override die()
  respawn player

 walk() and attack() -called from Program class given input
 

Monster derives from Entity
 int array offsets 
 int sight

 override update()
  -move monster given offsets
  attack() player if in sight


TestMonster
 constructor()
  set animation images
  set attributes

Tile derives from Transform
 texture array
 select random texture
 isBlocking
 moveSpeed modifier
 spawnableMonster list
 
 on_collide(entity) called when an entity enters tile
  if isBlocking
   move entity back to original position as "collision"
    

if extra time:

Ability
 entity parent
 
 void update()
  allow subclass to have specific functionality

Weapon
 entity parent
 bool selected
 
 int damage
 int range

 void update()
  do the damage, do NOT override unless needed

utilities module

load_image(string name)
 try to load pygame image in try-catch
 return image, else return empty array if fail

load_sound(string name)
 try to load pygame sound
 return sound, else return NULL



UI subclasses to be designed by Igor

file saving/loading classes to be designed by Igor






